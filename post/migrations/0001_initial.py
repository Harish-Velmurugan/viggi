# Generated by Django 3.0.6 on 2020-10-02 19:11

import cloudinary_storage.storage
import datetime
from django.db import migrations, models
import django.db.models.deletion
import django_mysql.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('forum', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ExtendDays',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days', models.IntegerField(default=0)),
                ('reason', models.CharField(max_length=150)),
                ('docs', models.FileField(upload_to='reason_docs')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('problemId', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('RnD_Budget', models.CharField(max_length=20)),
                ('posteddate', models.DateTimeField(auto_now_add=True)),
                ('deadline', models.DateTimeField(default=datetime.datetime(2020, 10, 3, 0, 41, 21, 671502))),
                ('skill', models.CharField(max_length=100, verbose_name=django_mysql.models.ListCharField(models.CharField(max_length=20), max_length=105, size=5))),
                ('files', models.FileField(storage=cloudinary_storage.storage.RawMediaCloudinaryStorage(), upload_to='file')),
                ('img', models.ImageField(upload_to='problem_images')),
                ('sol_count', models.IntegerField(default=0)),
                ('solved', models.BooleanField(default=False)),
                ('expired', models.BooleanField(default=False)),
                ('chooseWinner', models.BooleanField(default=False)),
                ('popularity', models.IntegerField(default=0)),
                ('interested', django_mysql.models.ListTextField(models.IntegerField(), blank=True, size=None)),
                ('expert', models.IntegerField(default=0)),
                ('requested', django_mysql.models.ListTextField(models.IntegerField(), blank=True, size=None)),
                ('viewers', django_mysql.models.ListTextField(models.IntegerField(), blank=True, size=None)),
                ('paid', models.BooleanField(default=False)),
                ('lor', django_mysql.models.ListTextField(models.IntegerField(), blank=True, size=None)),
                ('topsolver', models.BooleanField(default=False)),
                ('topsolverexpired', models.BooleanField(default=False)),
                ('notified', models.BooleanField(default=False)),
                ('topsolvernotified', models.BooleanField(default=False)),
                ('RequestedTopSolver', django_mysql.models.ListTextField(models.IntegerField(), blank=True, size=None)),
                ('buckets', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='PostExpert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500)),
                ('description', models.TextField()),
                ('bucket', models.CharField(max_length=50)),
                ('posteddate', models.DateTimeField(auto_now_add=True)),
                ('paid', models.BooleanField(default=False)),
                ('completed', models.BooleanField(default=False)),
                ('skill', models.CharField(max_length=1000)),
                ('files', models.FileField(storage=cloudinary_storage.storage.RawMediaCloudinaryStorage(), upload_to='file')),
                ('img', models.ImageField(upload_to='problem_images')),
            ],
        ),
        migrations.CreateModel(
            name='Tree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('treeBase', models.TextField(default='')),
                ('treeCommon', models.TextField(default='')),
                ('forumPost', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='forum.ForumPost')),
            ],
        ),
    ]
